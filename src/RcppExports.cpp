// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Rminstd_rand
NumericVector Rminstd_rand(std::size_t length);
RcppExport SEXP _testRcpp_Rminstd_rand(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(Rminstd_rand(length));
    return rcpp_result_gen;
END_RCPP
}
// Rmt19937
NumericVector Rmt19937(std::size_t length);
RcppExport SEXP _testRcpp_Rmt19937(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(Rmt19937(length));
    return rcpp_result_gen;
END_RCPP
}
// Rknuth_b
NumericVector Rknuth_b(std::size_t length);
RcppExport SEXP _testRcpp_Rknuth_b(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(Rknuth_b(length));
    return rcpp_result_gen;
END_RCPP
}
// Rminstd_rand_int
IntegerVector Rminstd_rand_int(std::size_t length);
RcppExport SEXP _testRcpp_Rminstd_rand_int(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(Rminstd_rand_int(length));
    return rcpp_result_gen;
END_RCPP
}
// Rmt19937_int
IntegerVector Rmt19937_int(std::size_t length);
RcppExport SEXP _testRcpp_Rmt19937_int(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(Rmt19937_int(length));
    return rcpp_result_gen;
END_RCPP
}
// Rknuth_b_int
IntegerVector Rknuth_b_int(std::size_t length);
RcppExport SEXP _testRcpp_Rknuth_b_int(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(Rknuth_b_int(length));
    return rcpp_result_gen;
END_RCPP
}
// Sample
NumericVector Sample(NumericVector& input, std::size_t size, bool replace);
RcppExport SEXP _testRcpp_Sample(SEXP inputSEXP, SEXP sizeSEXP, SEXP replaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type input(inputSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    rcpp_result_gen = Rcpp::wrap(Sample(input, size, replace));
    return rcpp_result_gen;
END_RCPP
}
// sample_int
IntegerVector sample_int(IntegerVector& input, std::size_t size, bool replace);
RcppExport SEXP _testRcpp_sample_int(SEXP inputSEXP, SEXP sizeSEXP, SEXP replaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type input(inputSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_int(input, size, replace));
    return rcpp_result_gen;
END_RCPP
}
// startsWith
bool startsWith(std::string str, std::string substr);
RcppExport SEXP _testRcpp_startsWith(SEXP strSEXP, SEXP substrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type substr(substrSEXP);
    rcpp_result_gen = Rcpp::wrap(startsWith(str, substr));
    return rcpp_result_gen;
END_RCPP
}
// endsWith
bool endsWith(std::string str, std::string substr);
RcppExport SEXP _testRcpp_endsWith(SEXP strSEXP, SEXP substrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type substr(substrSEXP);
    rcpp_result_gen = Rcpp::wrap(endsWith(str, substr));
    return rcpp_result_gen;
END_RCPP
}
// replaceSubstring
std::string replaceSubstring(std::string s, std::string oldSubstr, std::string newSubstr);
RcppExport SEXP _testRcpp_replaceSubstring(SEXP sSEXP, SEXP oldSubstrSEXP, SEXP newSubstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< std::string >::type oldSubstr(oldSubstrSEXP);
    Rcpp::traits::input_parameter< std::string >::type newSubstr(newSubstrSEXP);
    rcpp_result_gen = Rcpp::wrap(replaceSubstring(s, oldSubstr, newSubstr));
    return rcpp_result_gen;
END_RCPP
}
// toTable_char
std::map<std::string, double> toTable_char(std::string x);
RcppExport SEXP _testRcpp_toTable_char(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(toTable_char(x));
    return rcpp_result_gen;
END_RCPP
}
// power_vector
Rcpp::NumericVector power_vector(Rcpp::NumericVector x, double power);
RcppExport SEXP _testRcpp_power_vector(SEXP xSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(power_vector(x, power));
    return rcpp_result_gen;
END_RCPP
}
// toTable
std::map<std::string, double> toTable(Rcpp::NumericVector x);
RcppExport SEXP _testRcpp_toTable(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(toTable(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_testRcpp_Rminstd_rand", (DL_FUNC) &_testRcpp_Rminstd_rand, 1},
    {"_testRcpp_Rmt19937", (DL_FUNC) &_testRcpp_Rmt19937, 1},
    {"_testRcpp_Rknuth_b", (DL_FUNC) &_testRcpp_Rknuth_b, 1},
    {"_testRcpp_Rminstd_rand_int", (DL_FUNC) &_testRcpp_Rminstd_rand_int, 1},
    {"_testRcpp_Rmt19937_int", (DL_FUNC) &_testRcpp_Rmt19937_int, 1},
    {"_testRcpp_Rknuth_b_int", (DL_FUNC) &_testRcpp_Rknuth_b_int, 1},
    {"_testRcpp_Sample", (DL_FUNC) &_testRcpp_Sample, 3},
    {"_testRcpp_sample_int", (DL_FUNC) &_testRcpp_sample_int, 3},
    {"_testRcpp_startsWith", (DL_FUNC) &_testRcpp_startsWith, 2},
    {"_testRcpp_endsWith", (DL_FUNC) &_testRcpp_endsWith, 2},
    {"_testRcpp_replaceSubstring", (DL_FUNC) &_testRcpp_replaceSubstring, 3},
    {"_testRcpp_toTable_char", (DL_FUNC) &_testRcpp_toTable_char, 1},
    {"_testRcpp_power_vector", (DL_FUNC) &_testRcpp_power_vector, 2},
    {"_testRcpp_toTable", (DL_FUNC) &_testRcpp_toTable, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_testRcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
