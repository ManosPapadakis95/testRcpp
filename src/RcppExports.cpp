// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// power_vector
Rcpp::NumericVector power_vector(Rcpp::NumericVector x, double power);
RcppExport SEXP _testRcpp_power_vector(SEXP xSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(power_vector(x, power));
    return rcpp_result_gen;
END_RCPP
}
// sqrt_vector
Rcpp::NumericVector sqrt_vector(Rcpp::NumericVector x);
RcppExport SEXP _testRcpp_sqrt_vector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sqrt_vector(x));
    return rcpp_result_gen;
END_RCPP
}
// sum_vector
double sum_vector(Rcpp::NumericVector x);
RcppExport SEXP _testRcpp_sum_vector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_vector(x));
    return rcpp_result_gen;
END_RCPP
}
// divide_vector
Rcpp::NumericVector divide_vector(Rcpp::NumericVector x, double divisor);
RcppExport SEXP _testRcpp_divide_vector(SEXP xSEXP, SEXP divisorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type divisor(divisorSEXP);
    rcpp_result_gen = Rcpp::wrap(divide_vector(x, divisor));
    return rcpp_result_gen;
END_RCPP
}
// multiply_vector
Rcpp::NumericVector multiply_vector(Rcpp::NumericVector x, double multiplier);
RcppExport SEXP _testRcpp_multiply_vector(SEXP xSEXP, SEXP multiplierSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type multiplier(multiplierSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_vector(x, multiplier));
    return rcpp_result_gen;
END_RCPP
}
// toTable
std::map<std::string, double> toTable(Rcpp::NumericVector x);
RcppExport SEXP _testRcpp_toTable(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(toTable(x));
    return rcpp_result_gen;
END_RCPP
}
// generate_minstd_rand0_sequence
NumericVector generate_minstd_rand0_sequence(std::size_t length);
RcppExport SEXP _testRcpp_generate_minstd_rand0_sequence(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_minstd_rand0_sequence(length));
    return rcpp_result_gen;
END_RCPP
}
// generate_minstd_rand_sequence
NumericVector generate_minstd_rand_sequence(std::size_t length);
RcppExport SEXP _testRcpp_generate_minstd_rand_sequence(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_minstd_rand_sequence(length));
    return rcpp_result_gen;
END_RCPP
}
// generate_mt19937_sequence
NumericVector generate_mt19937_sequence(std::size_t length);
RcppExport SEXP _testRcpp_generate_mt19937_sequence(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_mt19937_sequence(length));
    return rcpp_result_gen;
END_RCPP
}
// generate_mt19937_64_sequence
NumericVector generate_mt19937_64_sequence(std::size_t length);
RcppExport SEXP _testRcpp_generate_mt19937_64_sequence(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_mt19937_64_sequence(length));
    return rcpp_result_gen;
END_RCPP
}
// generate_ranlux24_base_sequence
NumericVector generate_ranlux24_base_sequence(std::size_t length);
RcppExport SEXP _testRcpp_generate_ranlux24_base_sequence(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_ranlux24_base_sequence(length));
    return rcpp_result_gen;
END_RCPP
}
// generate_ranlux48_base_sequence
NumericVector generate_ranlux48_base_sequence(std::size_t length);
RcppExport SEXP _testRcpp_generate_ranlux48_base_sequence(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_ranlux48_base_sequence(length));
    return rcpp_result_gen;
END_RCPP
}
// generate_ranlux24_sequence
NumericVector generate_ranlux24_sequence(std::size_t length);
RcppExport SEXP _testRcpp_generate_ranlux24_sequence(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_ranlux24_sequence(length));
    return rcpp_result_gen;
END_RCPP
}
// generate_ranlux48_sequence
NumericVector generate_ranlux48_sequence(std::size_t length);
RcppExport SEXP _testRcpp_generate_ranlux48_sequence(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_ranlux48_sequence(length));
    return rcpp_result_gen;
END_RCPP
}
// generate_knuth_b_sequence
NumericVector generate_knuth_b_sequence(std::size_t length);
RcppExport SEXP _testRcpp_generate_knuth_b_sequence(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_knuth_b_sequence(length));
    return rcpp_result_gen;
END_RCPP
}
// generate_default_random_engine_sequence
NumericVector generate_default_random_engine_sequence(std::size_t length);
RcppExport SEXP _testRcpp_generate_default_random_engine_sequence(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_default_random_engine_sequence(length));
    return rcpp_result_gen;
END_RCPP
}
// generate_subtract_with_carry_engine_sequence
NumericVector generate_subtract_with_carry_engine_sequence(std::size_t length);
RcppExport SEXP _testRcpp_generate_subtract_with_carry_engine_sequence(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_subtract_with_carry_engine_sequence(length));
    return rcpp_result_gen;
END_RCPP
}
// generate_subtract_with_carry_engine_64_sequence
NumericVector generate_subtract_with_carry_engine_64_sequence(std::size_t length);
RcppExport SEXP _testRcpp_generate_subtract_with_carry_engine_64_sequence(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_subtract_with_carry_engine_64_sequence(length));
    return rcpp_result_gen;
END_RCPP
}
// sample
NumericVector sample(NumericVector& input, std::size_t size, bool replace);
RcppExport SEXP _testRcpp_sample(SEXP inputSEXP, SEXP sizeSEXP, SEXP replaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type input(inputSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    rcpp_result_gen = Rcpp::wrap(sample(input, size, replace));
    return rcpp_result_gen;
END_RCPP
}
// sample_int
IntegerVector sample_int(IntegerVector& input, std::size_t size, bool replace);
RcppExport SEXP _testRcpp_sample_int(SEXP inputSEXP, SEXP sizeSEXP, SEXP replaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type input(inputSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_int(input, size, replace));
    return rcpp_result_gen;
END_RCPP
}
// containsSubstring
bool containsSubstring(std::string str, std::string substr);
RcppExport SEXP _testRcpp_containsSubstring(SEXP strSEXP, SEXP substrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type substr(substrSEXP);
    rcpp_result_gen = Rcpp::wrap(containsSubstring(str, substr));
    return rcpp_result_gen;
END_RCPP
}
// toUpperCase
std::string toUpperCase(std::string s);
RcppExport SEXP _testRcpp_toUpperCase(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(toUpperCase(s));
    return rcpp_result_gen;
END_RCPP
}
// trim
std::string trim(std::string s);
RcppExport SEXP _testRcpp_trim(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(trim(s));
    return rcpp_result_gen;
END_RCPP
}
// startsWith
bool startsWith(std::string str, std::string substr);
RcppExport SEXP _testRcpp_startsWith(SEXP strSEXP, SEXP substrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type substr(substrSEXP);
    rcpp_result_gen = Rcpp::wrap(startsWith(str, substr));
    return rcpp_result_gen;
END_RCPP
}
// endsWith
bool endsWith(std::string str, std::string substr);
RcppExport SEXP _testRcpp_endsWith(SEXP strSEXP, SEXP substrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type substr(substrSEXP);
    rcpp_result_gen = Rcpp::wrap(endsWith(str, substr));
    return rcpp_result_gen;
END_RCPP
}
// replaceSubstring
std::string replaceSubstring(std::string s, std::string oldSubstr, std::string newSubstr);
RcppExport SEXP _testRcpp_replaceSubstring(SEXP sSEXP, SEXP oldSubstrSEXP, SEXP newSubstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< std::string >::type oldSubstr(oldSubstrSEXP);
    Rcpp::traits::input_parameter< std::string >::type newSubstr(newSubstrSEXP);
    rcpp_result_gen = Rcpp::wrap(replaceSubstring(s, oldSubstr, newSubstr));
    return rcpp_result_gen;
END_RCPP
}
// toTable_char
std::map<std::string, double> toTable_char(std::string x);
RcppExport SEXP _testRcpp_toTable_char(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(toTable_char(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_testRcpp_power_vector", (DL_FUNC) &_testRcpp_power_vector, 2},
    {"_testRcpp_sqrt_vector", (DL_FUNC) &_testRcpp_sqrt_vector, 1},
    {"_testRcpp_sum_vector", (DL_FUNC) &_testRcpp_sum_vector, 1},
    {"_testRcpp_divide_vector", (DL_FUNC) &_testRcpp_divide_vector, 2},
    {"_testRcpp_multiply_vector", (DL_FUNC) &_testRcpp_multiply_vector, 2},
    {"_testRcpp_toTable", (DL_FUNC) &_testRcpp_toTable, 1},
    {"_testRcpp_generate_minstd_rand0_sequence", (DL_FUNC) &_testRcpp_generate_minstd_rand0_sequence, 1},
    {"_testRcpp_generate_minstd_rand_sequence", (DL_FUNC) &_testRcpp_generate_minstd_rand_sequence, 1},
    {"_testRcpp_generate_mt19937_sequence", (DL_FUNC) &_testRcpp_generate_mt19937_sequence, 1},
    {"_testRcpp_generate_mt19937_64_sequence", (DL_FUNC) &_testRcpp_generate_mt19937_64_sequence, 1},
    {"_testRcpp_generate_ranlux24_base_sequence", (DL_FUNC) &_testRcpp_generate_ranlux24_base_sequence, 1},
    {"_testRcpp_generate_ranlux48_base_sequence", (DL_FUNC) &_testRcpp_generate_ranlux48_base_sequence, 1},
    {"_testRcpp_generate_ranlux24_sequence", (DL_FUNC) &_testRcpp_generate_ranlux24_sequence, 1},
    {"_testRcpp_generate_ranlux48_sequence", (DL_FUNC) &_testRcpp_generate_ranlux48_sequence, 1},
    {"_testRcpp_generate_knuth_b_sequence", (DL_FUNC) &_testRcpp_generate_knuth_b_sequence, 1},
    {"_testRcpp_generate_default_random_engine_sequence", (DL_FUNC) &_testRcpp_generate_default_random_engine_sequence, 1},
    {"_testRcpp_generate_subtract_with_carry_engine_sequence", (DL_FUNC) &_testRcpp_generate_subtract_with_carry_engine_sequence, 1},
    {"_testRcpp_generate_subtract_with_carry_engine_64_sequence", (DL_FUNC) &_testRcpp_generate_subtract_with_carry_engine_64_sequence, 1},
    {"_testRcpp_sample", (DL_FUNC) &_testRcpp_sample, 3},
    {"_testRcpp_sample_int", (DL_FUNC) &_testRcpp_sample_int, 3},
    {"_testRcpp_containsSubstring", (DL_FUNC) &_testRcpp_containsSubstring, 2},
    {"_testRcpp_toUpperCase", (DL_FUNC) &_testRcpp_toUpperCase, 1},
    {"_testRcpp_trim", (DL_FUNC) &_testRcpp_trim, 1},
    {"_testRcpp_startsWith", (DL_FUNC) &_testRcpp_startsWith, 2},
    {"_testRcpp_endsWith", (DL_FUNC) &_testRcpp_endsWith, 2},
    {"_testRcpp_replaceSubstring", (DL_FUNC) &_testRcpp_replaceSubstring, 3},
    {"_testRcpp_toTable_char", (DL_FUNC) &_testRcpp_toTable_char, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_testRcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
